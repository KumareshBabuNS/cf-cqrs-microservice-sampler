buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        axonVersion = '2.4.5'
        springCloudConnectorsVersion = '1.2.3.RELEASE'
        springGradleDependencyManagement = '0.6.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springGradleDependencyManagement}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

group = 'benwilcock'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR1"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:1.1.2.RELEASE"
    }
}

repositories {
    maven {
        url "https://repo.spring.io/plugins-release"
    }
}

jar {
    baseName = 'product-command-side'
    archiveName = 'product-command-side.jar'
}


dependencies {
    compile project(':common-things')

    // Axon CQRS
    compile("org.axonframework:axon-amqp:${axonVersion}")
    compile("org.axonframework:axon-mongo:${axonVersion}")

    // String Boot
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")

    //Unsure what needs these TBH...
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("com.h2database:h2")

    // Spring Cloud Connectors
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-localconfig-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}"

    // Pivotal Spring Cloud Services
    compile "io.pivotal.spring.cloud:spring-cloud-services-starter-config-client"

    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile("org.axonframework:axon-test:${axonVersion}")
}

def JvmSettings = [
        "-Dspring.cloud.appId=product-command-side",
        "-Dspring.profiles.active=cloud",
        "-Dspring.cloud.rabbitmq=amqp://user:pass@localhost:5672/testvhost",
        "-Dspring.cloud.mongodb=mongodb://localhost:27017/testdb",
        "-DINSTANCE_GUID=6AE34479-A77E-4BBC-8E29-16D57AEBB01D",
        "-DINSTANCE_INDEX=0"
]

test {
    jvmArgs = JvmSettings
}

bootRun {
    jvmArgs = JvmSettings
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task image(type: Docker, dependsOn: build){
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst{
        copy {
            from jar
            into stageDir
        }
    }
}

//dependencies {
//    compile project(':common-things')
//    compile("org.axonframework:axon-amqp:2.4.3")
//    compile("org.axonframework:axon-mongo:2.4.3")
//    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
//    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
//    compile("org.springframework.boot:spring-boot-starter-jetty:${springBootVersion}")
//    compile("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
//    compile("org.springframework.boot:spring-boot-starter-data-mongodb:${springBootVersion}")
//    compile("org.springframework.retry:spring-retry")
//    compile("org.springframework.boot:spring-boot-starter-aop:${springBootVersion}")
//    compile("org.springframework.cloud:spring-cloud-starter-eureka")
//    compile("org.springframework.cloud:spring-cloud-starter-config")
//    testCompile("org.springframework.boot:spring-boot-starter-test")
//    testCompile("org.axonframework:axon-test:2.4.3")
//}


