buildscript {
    ext {
        springBootVersion = '1.3.5.RELEASE'
        axonVersion = '2.4.5'
        springCloudConnectorsVersion = '1.2.3.RELEASE'
        springGradleDependencyManagement = '0.6.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:${springGradleDependencyManagement}")
        classpath('se.transmode.gradle:gradle-docker:1.2')
    }
}

group = 'benwilcock'
apply plugin: 'spring-boot'
apply plugin: 'docker'
apply plugin: "io.spring.dependency-management"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:Brixton.SR1"
        mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:1.1.2.RELEASE"
    }
}

repositories {
    maven {
      url "https://repo.spring.io/plugins-release"
    }
}

jar {
    baseName = 'product-query-side'
    archiveName = 'product-query-side.jar'
}

dependencies {

    // Shared Event definitions
    compile project(':common-things')

    // Axon CQRS
    compile("org.axonframework:axon-amqp:${axonVersion}")

    // String Boot
    compile("org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-amqp:${springBootVersion}")
    testCompile("org.springframework.boot:spring-boot-starter-test")


    // JPA Persistence
    compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
    compile("org.springframework.boot:spring-boot-starter-data-rest:${springBootVersion}")
    runtime("mysql:mysql-connector-java")

    // Spring Cloud Connectors
    compile "org.springframework.cloud:spring-cloud-spring-service-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-localconfig-connector:${springCloudConnectorsVersion}"
    compile "org.springframework.cloud:spring-cloud-cloudfoundry-connector:${springCloudConnectorsVersion}"

    // Pivotal Spring Cloud Services
    compile "io.pivotal.spring.cloud:spring-cloud-services-starter-config-client"
    compile 'io.pivotal.spring.cloud:spring-cloud-services-starter-service-registry'
    compile 'org.springframework.cloud:spring-cloud-starter-bus-amqp'
}

def JvmSettings = [
        // "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005",
        "-Dspring.cloud.appId=product-query-side",
        "-Dspring.profiles.active=cloud",
        "-Dspring.cloud.database=mysql://user:pass@localhost:3306/testdb",
        "-Dspring.cloud.rabbitmq=amqp://user:pass@localhost:5672/testvhost",
        "-DINSTANCE_GUID=3DCA161E-903F-4A65-BAEF-66C8E69298A5",
        "-DINSTANCE_INDEX=0"
]

test {
    jvmArgs = JvmSettings
}

bootRun {
    jvmArgs = JvmSettings
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.3'
}

task image(type: Docker, dependsOn: assemble){
    push = false
    applicationName = jar.baseName
    dockerfile = file('src/main/docker/Dockerfile')
    doFirst{
        copy {
            from jar
            into stageDir
        }
    }
}
